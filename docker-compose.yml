volumes:
  store:
    driver: local

services:
  extract:
    build:
      context: .
      dockerfile: ./ext/Dockerfile
    ports:
      - "8080:8080"
    user: user
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    mem_limit: 1024M
    mem_reservation: 512M
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://extract:8080/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always

  subset:
    build:
      context: .
      dockerfile: ./sub/Dockerfile
    ports:
      - "7080:7080"
    user: user
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    mem_limit: 1024M
    mem_reservation: 512M
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://subset:7080/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always
    depends_on:
      extract:
        condition: service_healthy

  write:
    build:
      context: .
      dockerfile: ./wrt/Dockerfile
    environment:
      DB_NAME: idle
      DB_USER: user
      DB_PASS: pass
    ports:
      - "6080:6080"
    user: user
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    mem_limit: 1024M
    mem_reservation: 512M
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://write:6080/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always
    depends_on:
      subset:
        condition: service_healthy
      database:
        condition: service_healthy

  read:
    build:
      context: .
      dockerfile: ./rdb/Dockerfile
    environment:
      DB_NAME: idle
      DB_USER: user
      DB_PASS: pass
    ports:
      - "4080:4080"
    user: user
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    mem_limit: 1024M
    mem_reservation: 512M
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://read:4080/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:16
    environment:
      POSTGRES_DB: idle
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    security_opt:
      - no-new-privileges:true
    volumes:
      - store:/var/lib/postgresql/data
      - ./wrt/conf/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "idle"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: always

  interface:
    build:
      context: .
      dockerfile: ./gui/Dockerfile
    ports:
      - "3080:3080"
    user: user
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    restart: always
